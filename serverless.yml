service: fifty-thirty-twenty
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-offline-local-authorizers-plugin
custom:
  budgetsTableName: "budgets-${self:provider.stage}"
  budgetItemsTableName: "budget-items-${self:provider.stage}"
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  serverless-offline:
    noPrependStageInUrl: true
    reloadHandler: true
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - { "Fn::GetAtt": ["BudgetItemsDynamoDBTable", "Arn"] }
        - Fn::Join:
            - "/"
            - 
              - { "Fn::GetAtt": ["BudgetItemsDynamoDBTable", "Arn"] }
              - "index/*"
        - { "Fn::GetAtt": ["503020UserPool", "Arn"] }
  environment:
    BUDGETS_TABLE: ${self:custom.budgetsTableName}
    BUDGET_ITEMS_TABLE: ${self:custom.budgetItemsTableName}
    user_pool_id: { Ref: 503020UserPool }
    client_id: { Ref: 503020UserPoolClient }
    STAGE_NAME: ${self:provider.stage} 
    VERSION_NUMBER: "v1"

functions:
  signup:
    handler: auth/signup.handler
    events:
      - http:
          path: /signup
          method: post
  login:
    handler: auth/login.handler
    events:
      - http:
          path: /login
          method: post
  userData:
    handler: userData.handler
    events:
      - http:
          path: /userData
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  createBudget:
    handler: userData.handler
    events:
      - http:
          path: /createBudget
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  readBudgets:
    handler: userData.handler
    events:
      - http:
          path: /readBudgets
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  readBudget:
    handler: userData.handler
    events:
      - http:
          path: /readBudget
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  updateBudget:
    handler: userData.handler
    events:
      - http:
          path: /updateBudget
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  deleteBudget:
    handler: userData.handler
    events:
      - http:
          path: /deleteBudget
          method: delete
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  createBudgetItem:
    handler: userData.handler
    events:
      - http:
          path: /createBudgetItem
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  readBudgetItem:
    handler: userData.handler
    events:
      - http:
          path: /readBudgetItem
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"

  readBudgetItems:
    handler: userData.handler
    events:
      - http:
          path: /readBudgetItems
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  udpateBudgetItem:
    handler: userData.handler
    events:
      - http:
          path: /updateBudgetItem
          method: post
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
  deleteBudgetItem:
    handler: userData.handler
    events:
      - http:
          path: /deleteBudgetItem
          method: delete
          authorizer:
            name: 503020_authorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - 503020UserPool
                - Arn
            claims:
              - email
          localAuthorizer:
            name: "mylocalAuthProxyFn"
            type: "request"
resources:
  Resources:
    BudgetItemsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: budgetId
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

          - IndexName: budgetId
            KeySchema:
              - AttributeName: budgetId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.budgetItemsTableName}
    503020UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-503020-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: false
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    503020UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-503020-user-pool-client
        GenerateSecret: false
        UserPoolId:
          Ref: 503020UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
